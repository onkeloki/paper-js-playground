// Generated by CoffeeScript 1.10.0
var Carpet, Triangle;

project.currentStyle = {
  fillColor: '#fff',
  strokeColor: 'black',
  strokeWidth: 1
};

Triangle = (function() {
  Triangle.prototype.debugPoint = function(p, color) {
    var r;
    r = Path.Circle(p, 20);
    return r.fillColor = color;
  };

  function Triangle(points1) {
    this.points = points1;
    this.p1 = this.points[0];
    this.p2 = this.points[1];
    this.p3 = this.points[2];
    this.path = new Path({
      segments: [this.p1, this.p2, this.p3, this.p1],
      strokeColor: "black",
      strokeWidth: 1
    });
  }

  Triangle.prototype.iterate = function(count) {
    var depth, i, points, ref, results, t;
    results = [];
    for (depth = i = 0, ref = count; 0 <= ref ? i <= ref : i >= ref; depth = 0 <= ref ? ++i : --i) {
      if (depth === 0) {
        points = this.getChildTriangle();
      } else {
        points = t.getChildTriangle();
      }
      results.push(t = new Triangle(points));
    }
    return results;
  };

  Triangle.prototype.getChildTriangle = function() {
    return [this.pointOnline(this.p1, this.p2, 0.05), this.pointOnline(this.p2, this.p3, 0.05), this.pointOnline(this.p3, this.p1, 0.05)];
  };

  Triangle.prototype.pointOnline = function(pa, pb, pos) {
    return new Point(pa.x + (pb.x - pa.x) * pos, pa.y + (pb.y - pa.y) * pos);
  };

  return Triangle;

})();

Carpet = (function() {
  function Carpet() {
    var i, j, k, ref, ref1, results, x, y;
    this.colors = ["#F8F8FF", "#CCE7D3", "#FEE39F", "#E69AC2", "#A6D0F9"];
    this.colors = ["#fff", "red", "blue"];
    this.types = ["tl", "tr"];
    this.minScale = 1;
    this.maxScale = 1;
    this.scales = (function() {
      results = [];
      for (var i = ref = this.minScale, ref1 = this.maxScale; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this);
    this.strokes = [1];
    this.segmentSize = 200;
    for (x = j = 0; j <= 50; x = ++j) {
      for (y = k = 0; k <= 50; y = ++k) {
        this.fullSquare(x, y);
      }
    }
  }

  Carpet.prototype.getRandomFrom = function(array) {
    return array[Math.floor(Math.random() * array.length)];
  };

  Carpet.prototype.fullSquare = function(x, y) {
    x = x * this.segmentSize * 2;
    y = y * this.segmentSize * 2;
    this.triangle(0 + x, 0 + y, this.getRandomFrom(this.colors), this.getRandomFrom(this.types));
    this.triangle(this.segmentSize + x, 0 + y, this.getRandomFrom(this.colors), this.getRandomFrom(this.types));
    this.triangle(0 + x, this.segmentSize + y, this.getRandomFrom(this.colors), this.getRandomFrom(this.types));
    return this.triangle(this.segmentSize + x, this.segmentSize + y, this.getRandomFrom(this.colors), this.getRandomFrom(this.types));
  };

  Carpet.prototype.triangle = function(shiftX, shiftY, color, type) {
    var p1, p2, p3, t;
    if (type === "tl" || true) {
      p1 = new Point(0 + shiftX, 0 + shiftY);
      p2 = new Point(this.segmentSize + shiftX, 0 + shiftY);
      p3 = new Point(0 + shiftX, this.segmentSize + shiftY);
      t = new Triangle([p1, p2, p3]);
      t.iterate(10);
    }
    if (type === "tr" || true) {
      p1 = new Point(0 + shiftX, 0 + shiftY);
      p2 = new Point(this.segmentSize + shiftX, 0 + shiftY);
      p3 = new Point(this.segmentSize + shiftX, this.segmentSize + shiftY);
      t = new Triangle([p1, p2, p3]);
      t.iterate(10);
    }
    if (type === "bl") {
      p1 = new Point(0 + shiftX, 0 + shiftY);
      p2 = new Point(this.segmentSize + shiftX, this.segmentSize + shiftY);
      p3 = new Point(0 + shiftX, this.segmentSize + shiftY);
      t = new Triangle([p1, p2, p3]);
      t.iterate(10);
    }
    if (type === "br") {
      p1 = new Point(this.segmentSize + shiftX, 0 + shiftY);
      p2 = new Point(this.segmentSize + shiftX, this.segmentSize + shiftY);
      p3 = new Point(0 + shiftX, this.segmentSize + shiftY);
      t = new Triangle([p1, p2, p3]);
      t.iterate(10);
    }
    return t;
  };

  return Carpet;

})();

new Carpet();
