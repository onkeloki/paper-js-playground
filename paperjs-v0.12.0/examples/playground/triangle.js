// Generated by CoffeeScript 1.10.0
var Triangle, add, b, it, ra;

Triangle = (function() {
  function Triangle(points1, startColor) {
    this.points = points1;
    this.startColor = startColor;
    this.iterations = [];
    this.direction = "cw";
    if (!this.startColor) {
      this.startColor = "#c0c0c0";
    }
    this.p1 = this.points[0];
    this.p2 = this.points[1];
    this.p3 = this.points[2];
    this.draw();
  }

  Triangle.prototype.clearAll = function() {
    var i, len, ref, t;
    ref = this.iterations;
    for (i = 0, len = ref.length; i < len; i++) {
      t = ref[i];
      t.path.clear();
    }
    return this.iterations = [];
  };

  Triangle.prototype.getPath = function() {
    return this.path;
  };

  Triangle.prototype.draw = function() {
    if (this.path) {
      this.path.clear();
    }
    this.path = new Path({
      segments: [this.p1, this.p2, this.p3, this.p1]
    });
    this.path.fillColor = this.startColor;
    this.path.strokeColor = "#fff";
    return this.path.strokeWidth = 0;
  };

  Triangle.prototype.iterate = function(count, endColor) {
    var depth, first, i, percdone, points, ref, t;
    this.clearAll();
    if (endColor) {
      this.endColor = endColor;
    }
    first = false;
    for (depth = i = 1, ref = count; 1 <= ref ? i <= ref : i >= ref; depth = 1 <= ref ? ++i : --i) {
      if (!first) {
        points = this.getChildTriangle();
        first = true;
      } else {
        points = t.getChildTriangle();
      }
      t = new Triangle(points);
      this.iterations.push(t);
      t.path.fillColor = this.startColor;
      if (this.endColor) {
        percdone = depth / count;
        t.path.fillColor = blend_colors(this.startColor, this.endColor, percdone);
      }
    }
    return this;
  };

  Triangle.prototype.getChildTriangle = function() {
    var speed;
    speed = 0.05;
    return [this.pointOnline(this.p1, this.p2, speed), this.pointOnline(this.p2, this.p3, speed), this.pointOnline(this.p3, this.p1, speed)];
  };

  Triangle.prototype.pointOnline = function(pa, pb, pos) {
    return new Point(pa.x + (pb.x - pa.x) * pos, pa.y + (pb.y - pa.y) * pos);
  };

  return Triangle;

})();

it = 20;

ra = new Path.Rectangle(new Point(0, 0), new Size(window.innerWidth, window.innerHeight));

ra.fillColor = "#000";

b = ra.bounds;

window.x = new Triangle([b.bottomRight, b.topCenter, b.bottomLeft], "#000").iterate(it, "#00ff00");

window.y = new Triangle([b.topLeft, b.topCenter, b.bottomLeft], "#000").iterate(it, "#00ffff");

window.z = new Triangle([b.topCenter, b.topRight, b.bottomRight], "#000").iterate(it, "#ffff00");

add = (function(_this) {
  return function() {
    it++;
    window.x.iterate(it);
    window.y.iterate(it);
    return window.z.iterate(it);
  };
})(this);
